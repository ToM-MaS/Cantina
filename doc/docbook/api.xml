<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="api" xml:lang="de"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>API</title>

  <info>
    <authorgroup>
      <author>
        <orgname>Amooma GmbH</orgname>

        <uri><link
        xlink:href="http://www.amooma.de/">http://www.amooma.de</link></uri>
      </author>

      <author>
        <personname><firstname>Philipp</firstname><surname>Kempgen</surname></personname>

        <affiliation>
          <org>
            <orgname>Amooma GmbH</orgname>
          </org>
        </affiliation>
      </author>
    </authorgroup>
  </info>

  <para>Wie bei Ruby-on-Rails-Projekten üblich sind die einzelnen
  &#8222;Ressourcen&#8220; (siehe <xref linkend="data-model" />) über eine API
  zugänglich. Dabei gibt es meist mehrere Formate, üblicherweise HTML und XML.
  HTML &#8211; das Standard-Format &#8211; dient zur Anzeige im Browser, XML
  dient zur automatisierten Ansteuerung, beispielsweise aus Skripten
  heraus.</para>

  <section xml:id="api-rest">
    <title>API im REST-Stil</title>

    <para>Betrachten wir als Beispiel mal die Ressource
    &#8222;<literal>phone_models</literal>&#8220; zum
    <classname>PhoneModel</classname> <foreignphrase
    xml:lang="en">model</foreignphrase>, die die verfügbaren Telefon-Modelle
    bezeichnet (siehe <xref linkend="model-phone-model" />).</para>

    <para>Voraussetzung: Der Web-Server ist gestartet, wie in <xref
    linkend="server-starten" /> beschrieben.</para>

    <screen>debian:/usr/src/Cantina# <emphasis role="bold"><command>rails server</command></emphasis>
=&gt; Booting WEBrick
=&gt; Rails 3.0.3 application starting in development on http://0.0.0.0:3000
=&gt; Call with -d to detach
=&gt; Ctrl-C to shutdown server
[2010-11-23 09:35:30] INFO  WEBrick 1.3.1
[2010-11-23 09:35:30] INFO  ruby 1.9.2 (2010-08-18) [i686-linux]
[2010-11-23 09:35:30] INFO  WEBrick::HTTPServer#start: pid=2910 port=3000

</screen>

    <para>Auf dem Server
    &#8222;<literal>http://<replaceable>{host}</replaceable>:3000</literal>&#8220;
    unter dem Pfad &#8222;<literal>/</literal>&#8220; ist jetzt die
    Applikation erreichbar. Unter dem Pfad
    &#8222;<literal>/phone_models</literal>&#8220; bekommen Sie im Browser
    eine Liste der Telefon-Modelle angezeigt. Woher weiß die Applikation daß
    HTML ausgegeben werden soll? HTML ist &#8211; etwas vereinfacht gesagt
    &#8211; das Standard-Format.</para>

    <note>
      <para>Tatsächlich wird das zurückzugebende Format folgendermaßen
      bestimmt: Wenn der Client in der URL eine Dateiendung angibt
      (<literal>.html</literal> oder <literal>.xml</literal>), dann bekommt er
      das entsprechende Format.</para>

      <para>Wenn der Client keine Dateiendung angibt, dann kommt
      &#8222;<foreignphrase xml:lang="en">Content
      Negotiation</foreignphrase>&#8220; (<link
      xlink:href="http://tools.ietf.org/html/rfc2616#section-12.1">http://tools.ietf.org/html/rfc2616#section-12.1</link>)
      zum Einsatz. Clients senden üblicherweise einen HTTP-Header namens
      <literal>Accept</literal> (<link
      xlink:href="http://tools.ietf.org/html/rfc2616#section-14.1">http://tools.ietf.org/html/rfc2616#section-14.1</link>),
      in dem sie dem Server die von ihnen verstandenen Formate mitteilen. Ein
      Web-Browser sendet beispielsweise:<screen>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</screen>Der
      Server erkennt daran daß der Client das HTML-Format bevorzugt. Würde der
      Client folgendes senden:<screen>Accept: text/xml,application/xml</screen>so
      weiß der Server daß der Client XML bevorzugt.</para>
    </note>

    <para>In der Ausgabe des Rails-Servers (bzw. im Log mit <emphasis
    role="bold"><command>tail -f log/*.log</command></emphasis>) sieht
    man:<screen>Started GET "/phone_models" <replaceable>[...]</replaceable>
  Processing by PhoneModelsController#index as HTML
<replaceable>[...]</replaceable></screen></para>

    <para>Ebensogut kann man an den Pfad noch die Endung
    &#8222;<literal>.html</literal>&#8220; anhängen: Unter dem Pfad
    &#8222;<literal>/phone_models.html</literal>&#8220; bekommt man also die
    gleiche Ausgabe im Browser. Geloggt wird dabei:<screen>Started GET "/phone_models.html" <replaceable>[...]</replaceable>
  Processing by PhoneModelsController#index as HTML
<replaceable>[...]</replaceable></screen></para>

    <para>Wenn man nun die Liste im XML-Format haben will, so bekommt man
    diese mit der Endung &#8222;<literal>.xml</literal>&#8220;, also unter dem
    Pfad &#8222;<literal>/phone_models.xml</literal>&#8220;.</para>

    <note>
      <para>Auch dies läßt sich im Web-Browser ausprobieren. Bitte beachten
      Sie jedoch daß jeder Browser solche &#8222;nackten&#8220; XML-Daten
      anders darstellt. U.U. müssen Sie im Browser die Funktion
      &#8222;Seitenquelltext anzeigen&#8220; o.ä. aufrufen.</para>
    </note>

    <para>Geloggt wird dabei:<screen>Started GET "/phone_models.xml" <replaceable>[...]</replaceable>
  Processing by PhoneModelsController#index as XML
<replaceable>[...]</replaceable></screen></para>

    <para>Das XML-Format sieht etwa wie folgt aus (hier etwas
    gekürzt):<screen>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;phone-models type="array"&gt;
    
    &lt;phone-model&gt;
        &lt;id type="integer"&gt;4&lt;/id&gt;
        &lt;name&gt;Snom 360&lt;/name&gt;
        &lt;manufacturer-id type="integer"&gt;1&lt;/manufacturer-id&gt;
        &lt;number-of-keys type="integer"&gt;12&lt;/number-of-keys&gt;
        <replaceable>&lt;!-- ... --&gt;</replaceable>
    &lt;/phone-model&gt;
    
    &lt;phone-model&gt;
        &lt;id type="integer"&gt;5&lt;/id&gt;
        &lt;name&gt;Snom 370&lt;/name&gt;
        &lt;manufacturer-id type="integer"&gt;1&lt;/manufacturer-id&gt;
        &lt;number-of-keys type="integer"&gt;12&lt;/number-of-keys&gt;
        <replaceable>&lt;!-- ... --&gt;</replaceable>
    &lt;/phone-model&gt;
    
    <replaceable>&lt;!-- ... --&gt;</replaceable>
    
&lt;/phone-models&gt;</screen></para>

    <para>Betrachten wir nun mal im Überblick welche URL-Pfade und welche
    HTTP-Methoden es zu der Ressource
    &#8222;<literal>phone_models</literal>&#8220; in der REST-Architektur
    (siehe <link
    xlink:href="http://de.wikipedia.org/wiki/Representational_State_Transfer">http://de.wikipedia.org/wiki/Representational_State_Transfer</link>)
    gibt. Zuerst die für das HTML-Format. Die Endung
    &#8222;<literal>.html</literal>&#8220; ist dabei optional und wird
    üblicherweise nicht mit angegeben.<informaltable>
        <tgroup cols="4">
          <colspec align="left" colnum="1" colwidth="4*" />

          <colspec align="left" colnum="2" colwidth="2*" />

          <colspec align="left" colnum="3" colwidth="2*" />

          <colspec align="left" colnum="4" colwidth="3*" />

          <thead>
            <row>
              <entry>URL-&#8203;Pfad</entry>

              <entry>HTTP-&#8203;Methode</entry>

              <entry>Controller-&#8203;Aktion</entry>

              <entry>Datenbank</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><literal>/phone_models</literal></entry>

              <entry><literal>GET</literal></entry>

              <entry><methodname>index</methodname></entry>

              <entry><literal>SELECT …</literal></entry>
            </row>

            <row>
              <entry><literal>/phone_models/new</literal></entry>

              <entry><literal>GET</literal></entry>

              <entry><methodname>new</methodname></entry>

              <entry>- *</entry>
            </row>

            <row>
              <entry><literal>/phone_models</literal></entry>

              <entry><literal>POST</literal></entry>

              <entry><methodname>create</methodname></entry>

              <entry><literal>INSERT …</literal></entry>
            </row>

            <row>
              <entry><literal>/phone_models/1</literal></entry>

              <entry><literal>GET</literal></entry>

              <entry><methodname>show</methodname></entry>

              <entry><literal>SELECT … WHERE …</literal></entry>
            </row>

            <row>
              <entry><literal>/phone_models/1/edit</literal></entry>

              <entry><literal>GET</literal></entry>

              <entry><methodname>edit</methodname></entry>

              <entry><literal>SELECT … WHERE …</literal> *</entry>
            </row>

            <row>
              <entry><literal>/phone_models/1</literal></entry>

              <entry><literal>PUT</literal></entry>

              <entry><methodname>update</methodname></entry>

              <entry><literal>UPDATE … WHERE …</literal></entry>
            </row>

            <row>
              <entry><literal>/phone_models/1</literal></entry>

              <entry><literal>DELETE</literal></entry>

              <entry><methodname>destroy</methodname></entry>

              <entry><literal>DELETE … WHERE …</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

    <note>
      <para>* Die URL-Pfade <literal>/phone_models/new</literal> und
      <literal>/phone_models/1/edit</literal>, die per <literal>GET</literal>
      aufgerufen werden, sind eine Besonderheit für das HTML-Interface im
      Browser. Unter diesen URLs wird ein Formular zur Eingabe dargestellt.
      Erst beim Absenden des Formulars wird dann die manipulierende Operation
      (Erzeugen / Verändern) auf der Datenbank vorgenommen.</para>

      <para>Die Anhänge new und edit werden übrigens
      &#8222;Modifikatoren&#8220; (<foreignphrase
      xml:lang="en">modifiers</foreignphrase>) genannt.</para>
    </note>

    <note>
      <para>Die meisten Web-Browser unterstützen nur die HTTP-Methoden
      <literal>GET</literal> und <literal>POST</literal>, nicht jedoch
      <literal>PUT</literal> und <literal>DELETE</literal>. Ruby on Rails
      emuliert daher im Browser <literal>PUT</literal> und
      <literal>DELETE</literal> indem die HTTP-Methode <literal>POST</literal>
      genutzt wird, jedoch in einem nicht sichtbaren Parameter
      (<literal>_method</literal>) die eigentliche Methode übertragen wird.
      Dies geschieht automatisch und für den Anwender transparent.</para>
    </note>

    <para>Die gleichen URLs, jedoch mit der Endung
    &#8222;<literal>.xml</literal>&#8220;, gibt es &#8211; wie für das
    HTML-Format &#8211; auch für das XML-Format.<informaltable>
        <tgroup cols="4">
          <colspec align="left" colnum="1" colwidth="4*" />

          <colspec align="left" colnum="2" colwidth="2*" />

          <colspec align="left" colnum="3" colwidth="2*" />

          <colspec align="left" colnum="4" colwidth="3*" />

          <thead>
            <row>
              <entry>URL-&#8203;Pfad</entry>

              <entry>HTTP-&#8203;Methode</entry>

              <entry>Controller-&#8203;Aktion</entry>

              <entry>Datenbank</entry>
            </row>
          </thead>

          <tbody>
            <row>
              <entry><literal>/phone_models.xml</literal></entry>

              <entry><literal>GET</literal></entry>

              <entry><methodname>index</methodname></entry>

              <entry><literal>SELECT …</literal></entry>
            </row>

            <row>
              <entry><literal>/phone_models.xml</literal></entry>

              <entry><literal>POST</literal></entry>

              <entry><methodname>create</methodname></entry>

              <entry><literal>INSERT …</literal></entry>
            </row>

            <row>
              <entry><literal>/phone_models/1.xml</literal></entry>

              <entry><literal>GET</literal></entry>

              <entry><methodname>show</methodname></entry>

              <entry><literal>SELECT … WHERE …</literal></entry>
            </row>

            <row>
              <entry><literal>/phone_models/1.xml</literal></entry>

              <entry><literal>PUT</literal></entry>

              <entry><methodname>update</methodname></entry>

              <entry><literal>UPDATE … WHERE …</literal></entry>
            </row>

            <row>
              <entry><literal>/phone_models/1.xml</literal></entry>

              <entry><literal>DELETE</literal></entry>

              <entry><methodname>destroy</methodname></entry>

              <entry><literal>DELETE … WHERE …</literal></entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

    <note>
      <para>Details zu den HTTP-Methoden <literal>GET</literal>,
      <literal>POST</literal>, <literal>PUT</literal> und
      <literal>DELETE</literal> findet man übrigens im RFC das HTTP/1.1
      spezifiziert: <link
      xlink:href="http://tools.ietf.org/html/rfc2616#section-9">http://tools.ietf.org/html/rfc2616#section-9</link></para>
    </note>
  </section>

  <section xml:id="api-curl">
    <title>curl</title>

    <para>Natürlich läßt sich die API mit den bekannten HTTP-Tools wie
    <literal>curl</literal> oder <literal>wget</literal> benutzen.<screen>debian:~# <emphasis
          role="bold"><command>curl http://localhost:3000/phone_models.xml</command></emphasis>

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;phone-models type="array"&gt;
  &lt;phone-model&gt;
    &lt;id type="integer"&gt;4&lt;/id&gt;
    &lt;name&gt;Snom 360&lt;/name&gt;
    &lt;manufacturer-id type="integer"&gt;1&lt;/manufacturer-id&gt;
    &lt;number-of-keys type="integer"&gt;12&lt;/number-of-keys&gt;
    <replaceable>&lt;!-- ... --&gt;</replaceable>
  &lt;/phone-model&gt;
  &lt;phone-model&gt;
    &lt;id type="integer"&gt;5&lt;/id&gt;
    &lt;name&gt;Snom 370&lt;/name&gt;
    &lt;manufacturer-id type="integer"&gt;1&lt;/manufacturer-id&gt;
    &lt;number-of-keys type="integer"&gt;12&lt;/number-of-keys&gt;
    <replaceable>&lt;!-- ... --&gt;</replaceable>
  &lt;/phone-model&gt;
  <replaceable>&lt;!-- ... --&gt;</replaceable>
&lt;/phone-models&gt;</screen></para>

    <para>Im folgenden Beispiel verwenden wir die Ressource
    <literal>phones</literal> statt <literal>phone_models</literal>.</para>

    <para>Liste aller Telefone (<methodname>index</methodname>):<screen>debian:~# <emphasis
          role="bold"><command>curl -D - http://localhost:3000/phones.xml</command></emphasis>

HTTP/1.1 200 OK 
Content-Type: application/xml; charset=utf-8
<replaceable>[...]</replaceable>

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;phones type="array"&gt;
  &lt;phone&gt;
    &lt;created-at type="datetime"&gt;2011-01-10T14:42:41Z&lt;/created-at&gt;
    &lt;http-password nil="true"&gt;&lt;/http-password&gt;
    &lt;http-user nil="true"&gt;&lt;/http-user&gt;
    &lt;id type="integer"&gt;1&lt;/id&gt;
    &lt;ip-address nil="true"&gt;&lt;/ip-address&gt;
    &lt;last-ip-address nil="true"&gt;&lt;/last-ip-address&gt;
    &lt;mac-address&gt;001565123456&lt;/mac-address&gt;
    &lt;phone-model-id type="integer"&gt;15&lt;/phone-model-id&gt;
    &lt;updated-at type="datetime"&gt;2011-01-10T14:42:41Z&lt;/updated-at&gt;
  &lt;/phone&gt;
  &lt;phone&gt;
    &lt;created-at type="datetime"&gt;2011-01-10T14:42:41Z&lt;/created-at&gt;
    &lt;http-password nil="true"&gt;&lt;/http-password&gt;
    &lt;http-user nil="true"&gt;&lt;/http-user&gt;
    &lt;id type="integer"&gt;2&lt;/id&gt;
    &lt;ip-address nil="true"&gt;&lt;/ip-address&gt;
    &lt;last-ip-address nil="true"&gt;&lt;/last-ip-address&gt;
    &lt;mac-address&gt;000413123456&lt;/mac-address&gt;
    &lt;phone-model-id type="integer"&gt;4&lt;/phone-model-id&gt;
    &lt;updated-at type="datetime"&gt;2011-01-10T14:42:41Z&lt;/updated-at&gt;
  &lt;/phone&gt;
  <replaceable>&lt;!-- ... --&gt;</replaceable>
&lt;/phones&gt;</screen></para>

    <para>Geloggt wird dabei:<screen>Started GET "/phones.xml" <replaceable>[...]</replaceable>
  Processing by PhonesController#index as XML
  Phone Load (3.4ms)  SELECT "phones".* FROM "phones"
Completed 200 OK <replaceable>[...]</replaceable></screen></para>

    <para>Ein einzelnes Telefon abfragen
    (<methodname>show</methodname>):<screen>debian:~# <emphasis role="bold"><command>curl -D - http://localhost:3000/phones/1.xml</command></emphasis>

HTTP/1.1 200 OK 
Content-Type: application/xml; charset=utf-8
<replaceable>[...]</replaceable>

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;phone&gt;
  &lt;created-at type="datetime"&gt;2011-01-10T14:42:41Z&lt;/created-at&gt;
  &lt;http-password nil="true"&gt;&lt;/http-password&gt;
  &lt;http-user nil="true"&gt;&lt;/http-user&gt;
  &lt;id type="integer"&gt;1&lt;/id&gt;
  &lt;ip-address nil="true"&gt;&lt;/ip-address&gt;
  &lt;last-ip-address nil="true"&gt;&lt;/last-ip-address&gt;
  &lt;mac-address&gt;001565123456&lt;/mac-address&gt;
  &lt;phone-model-id type="integer"&gt;15&lt;/phone-model-id&gt;
  &lt;updated-at type="datetime"&gt;2011-01-10T14:42:41Z&lt;/updated-at&gt;
&lt;/phone&gt;
</screen></para>

    <para>Geloggt wird dabei:<screen>Started GET "/phones/1.xml" <replaceable>[...]</replaceable>
  Processing by PhonesController#show as XML
  Parameters: {"id"=&gt;"1"}
  Phone Load (0.7ms)  SELECT "phones".* FROM "phones" WHERE ("phones"."id" = 1) LIMIT 1
Completed 200 OK <replaceable>[...]</replaceable></screen></para>

    <para>Nun wollen wir ein neues Telefon anlegen
    (<methodname>create</methodname>). Nehmen wir mal ein Snom 360. Zum
    Anlegen des Telefons müssen wir die <literal>phone-model-id</literal>
    kennen. Diese bekommen wir wie weiter oben aus der XML-Liste der
    <literal>phone_models</literal>. Das Modell &#8222;Snom 360&#8220; hat die
    <literal>phone-model-id</literal> 4.</para>

    <para>Probieren wir das mal aus:<screen>debian:~# <emphasis role="bold"><command>curl -D - -X POST \
  -H 'Content-Type: application/xml' \
  --data-binary \
    '&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;phone&gt;
      &lt;mac-address&gt;00:04:13:00:00:01&lt;/mac-address&gt;
      &lt;phone-model-id&gt;4&lt;/phone-model-id&gt;
    &lt;/phone&gt;' \
  http://localhost:3000/phones.xml</command></emphasis>

HTTP/1.1 201 Created 
Location: http://localhost:3000/phones/7
Content-Type: application/xml; charset=utf-8
<replaceable>[...]</replaceable>

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;phone&gt;
  &lt;created-at type="datetime"&gt;2011-01-10T15:16:50Z&lt;/created-at&gt;
  &lt;http-password nil="true"&gt;&lt;/http-password&gt;
  &lt;http-user nil="true"&gt;&lt;/http-user&gt;
  &lt;id type="integer"&gt;7&lt;/id&gt;
  &lt;ip-address nil="true"&gt;&lt;/ip-address&gt;
  &lt;last-ip-address nil="true"&gt;&lt;/last-ip-address&gt;
  &lt;mac-address&gt;000413000001&lt;/mac-address&gt;
  &lt;phone-model-id type="integer"&gt;4&lt;/phone-model-id&gt;
  &lt;updated-at type="datetime"&gt;2011-01-10T15:16:50Z&lt;/updated-at&gt;
&lt;/phone&gt;
</screen></para>

    <para>Das neue Telefon hat die ID 7 bekommen.</para>

    <para>Geloggt wird dabei:<screen>Started POST "/phones.xml" <replaceable>[...]</replaceable>
  Processing by PhonesController#create as XML
  Parameters: {"phone"=&gt;{"mac_address"=&gt;"00:04:13:00:00:01", "phone_model_id"=&gt;"4"}}
  Phone Load (0.1ms)  SELECT "phones"."id" FROM "phones" WHERE ("phones"."mac_address" = '00:04:13:00:00:01') LIMIT 1
  PhoneModel Load (0.1ms)  SELECT "phone_models"."id" FROM "phone_models" WHERE ("phone_models"."id" = 4) LIMIT 1
  Oui Load (0.2ms)  SELECT "ouis".* FROM "ouis" WHERE ("ouis"."value" = '000413') LIMIT 1
  CACHE (0.0ms)  SELECT "ouis".* FROM "ouis" WHERE ("ouis"."value" = '000413') LIMIT 1
  Manufacturer Load (0.2ms)  SELECT "manufacturers".* FROM "manufacturers" WHERE ("manufacturers"."id" = 1) LIMIT 1
  PhoneModel Load (0.5ms)  SELECT "phone_models".* FROM "phone_models" WHERE ("phone_models"."id" = 4) LIMIT 1
  CACHE (0.0ms)  SELECT "manufacturers".* FROM "manufacturers" WHERE ("manufacturers"."id" = 1) LIMIT 1
  AREL (0.6ms)  INSERT INTO "phones" ("mac_address", "phone_model_id", "ip_address", "last_ip_address", "http_user", "http_password", "created_at", "updated_at") VALUES ('000413000001', 4, NULL, NULL, NULL, NULL, '2011-01-10 15:16:50.085697', '2011-01-10 15:16:50.085697')
Completed 201 Created <replaceable>[...]</replaceable></screen></para>

    <para>Das Telefon bearbeiten (<methodname>update</methodname>), z.B. die
    IP-Adresse verändern:<screen>debian:~# <emphasis role="bold"><command>curl -D - -X PUT \
  -H 'Content-Type: application/xml' \
  --data-binary \
    '&lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;phone&gt;
      &lt;ip-address&gt;10.0.0.55&lt;/ip-address&gt;
    &lt;/phone&gt;' \
  http://localhost:3000/phones/7.xml</command></emphasis>

HTTP/1.1 200 OK 
Content-Type: application/xml; charset=utf-8
<replaceable>[...]</replaceable></screen></para>

    <para>Geloggt wird dabei:<screen>Started PUT "/phones/7.xml" <replaceable>[...]</replaceable>
  Processing by PhonesController#update as XML
  Parameters: {"phone"=&gt;{"ip_address"=&gt;"10.0.0.55"}, "id"=&gt;"7"}
  Phone Load (0.7ms)  SELECT "phones".* FROM "phones" WHERE ("phones"."id" = 7) LIMIT 1
  Phone Load (0.2ms)  SELECT "phones"."id" FROM "phones" WHERE ("phones"."mac_address" = '000413000001') AND ("phones".id &lt;&gt; 7) LIMIT 1
  Phone Load (0.1ms)  SELECT "phones"."id" FROM "phones" WHERE ("phones"."ip_address" = '10.0.0.55') AND ("phones".id &lt;&gt; 7) LIMIT 1
  PhoneModel Load (0.7ms)  SELECT "phone_models"."id" FROM "phone_models" WHERE ("phone_models"."id" = 4) LIMIT 1
  Oui Load (0.1ms)  SELECT "ouis".* FROM "ouis" WHERE ("ouis"."value" = '000413') LIMIT 1
  CACHE (0.0ms)  SELECT "ouis".* FROM "ouis" WHERE ("ouis"."value" = '000413') LIMIT 1
  Manufacturer Load (0.1ms)  SELECT "manufacturers".* FROM "manufacturers" WHERE ("manufacturers"."id" = 1) LIMIT 1
  PhoneModel Load (0.5ms)  SELECT "phone_models".* FROM "phone_models" WHERE ("phone_models"."id" = 4) LIMIT 1
  CACHE (0.0ms)  SELECT "manufacturers".* FROM "manufacturers" WHERE ("manufacturers"."id" = 1) LIMIT 1
  AREL (0.4ms)  UPDATE "phones" SET "ip_address" = '10.0.0.55', "updated_at" = '2011-01-10 15:20:18.588354' WHERE ("phones"."id" = 7)
Completed 200 OK <replaceable>[...]</replaceable></screen></para>

    <para>Das Telefon löschen (<methodname>destroy</methodname>):<screen>debian:~# <emphasis
          role="bold"><command>curl -D - -X DELETE \
  http://localhost:3000/phones/7.xml</command></emphasis>

HTTP/1.1 200 OK 
<replaceable>[...]</replaceable></screen></para>

    <para>Geloggt wird dabei:<screen>Started DELETE "/phones/7.xml" <replaceable>[...]</replaceable>
  Processing by PhonesController#destroy as XML
  Parameters: {"id"=&gt;"7"}
  Phone Load (0.6ms)  SELECT "phones".* FROM "phones" WHERE ("phones"."id" = 7) LIMIT 1
  SipAccount Load (0.3ms)  SELECT "sip_accounts".* FROM "sip_accounts" WHERE ("sip_accounts".phone_id = 7) ORDER BY position
  RebootRequest Load (0.2ms)  SELECT "reboot_requests".* FROM "reboot_requests" WHERE ("reboot_requests".phone_id = 7) ORDER BY start
  AREL (0.2ms)  DELETE FROM "phones" WHERE ("phones"."id" = 7)
Completed 200 OK <replaceable>[...]</replaceable></screen></para>

    <para>Wir sehen daß prinzipiell alle Operationen der API mit einem Tool
    wie <literal>curl</literal> möglich sind, auch wenn das dann auf der Shell
    etwas unübersichtlich wird. Schöner geht es wenn man eine fertige
    Bibliothek benutzt, die dann tatsächlich auch die XML-Daten versteht und
    ein komfortables Interface bereitstellt, wie z.B.
    <classname>ActiveResource</classname> in Ruby (<xref
    linkend="api-active-resource-ruby" />).</para>
  </section>

  <section xml:id="api-active-resource-ruby">
    <title>ActiveResource in Ruby</title>

    <para>Die in <xref linkend="api-rest" /> kennengelernte XML-API läßt sich
    gut aus eigenen Skripten heraus aufrufen &#8211; man nennt das auch
    &#8222;konsumieren&#8220; (<foreignphrase
    xml:lang="en">consume</foreignphrase>). Dazu wird
    <classname>ActiveResource</classname> genutzt (siehe <link
    xlink:href="http://api.rubyonrails.org/classes/ActiveResource/Base.html">http://api.rubyonrails.org/classes/ActiveResource/Base.html</link>).</para>

    <note>
      <para>Sie können ein Skript zum Testen einfach auf dem gleichen Rechner
      anlegen (z.B. in einem neuen Terminal-Fenster) oder auf einem anderen
      Rechner.<screen>debian:~# <emphasis role="bold"><command>cd /var/tmp/</command></emphasis>
debian:/var/tmp# <emphasis role="bold"><command>touch api-test.rb</command></emphasis>
debian:/var/tmp# <emphasis role="bold"><command>chmod u+x api-test.rb</command></emphasis>
debian:/var/tmp# <emphasis role="bold">vim api-test.rb</emphasis>
</screen></para>
    </note>

    <para>Beispiel-Skript das die API verwendet:<programlisting>#! /usr/bin/env ruby

require 'active_resource'

class PhoneModel &lt; ActiveResource::Base
    self.site = "http://localhost:3000/"
    self.element_name = 'phone_model'
end

# alle Telefon-Modelle abrufen:
phone_models = PhoneModel.all
phone_models.each { |pm|
    puts "PhoneModel ID: #{pm.id}, name: #{pm.name}"
}

</programlisting></para>

    <para>Rufen wir das Skript mal auf:<screen>debian:/var/tmp# <emphasis
          role="bold"><command>./api-test.rb</command></emphasis>
<replaceable>[...]</replaceable>
PhoneModel ID: 4, name: Snom 360
PhoneModel ID: 5, name: Snom 370
<replaceable>[...]</replaceable>
debian:/var/tmp# </screen></para>

    <para>Auf dem Server sehen wir dabei im Log wie erwartet folgende
    Meldung:<screen>Started GET "/phone_models.xml" for 127.0.0.1 <replaceable>[...]</replaceable>
  Processing by PhoneModelsController#index as XML
  PhoneModel Load (43.6ms)  SELECT "phone_models".* <replaceable>[...]</replaceable>
Completed 200 OK in 114ms (Views: 45.3ms | ActiveRecord: 43.6ms)</screen></para>

    <para>Die per API bereitgestellten Ressourcen lassen sich also
    beispielsweise in eigenen Skripten ganz normal verwenden.</para>

    <para>Weitere Parameter und Dokumentation zur Verwendung von
    ActiveResource finden Sie in der Dokumentation von Ruby on Rails unter
    folgender URL:</para>

    <para><link
    xlink:href="http://api.rubyonrails.org/classes/ActiveResource/Base.html">http://api.rubyonrails.org/classes/ActiveResource/Base.html</link></para>
  </section>
</chapter>
